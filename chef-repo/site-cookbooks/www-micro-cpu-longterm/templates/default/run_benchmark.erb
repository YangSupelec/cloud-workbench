#!<%= @ruby %>

require './benchmark_helper'
require 'securerandom'

while(true) do
    puts "Starting benchmark run"
    do_run()
    sleep <%= @long_delay %>
end

# helper methods
BEGIN {
    def fail(message)
        BenchmarkHelper.submit_metric(<%= @metric %>, 1, message)
        exit
    end

    def find_cpu_result_in_string(string)
        /total time:\s*(.*)/.match string
    end

    def do_run()
        uuid = SecureRandom.uuid
        <%= @short_repetitions %>.times do
            do_single(uuid)
            sleep <%= @short_delay %>
        end
    end

    def do_single(uuid)
        # find out date
        date = `date`

        # find out our CPU
        cpu = `cat /proc/cpuinfo | grep 'model name' | cut -d ':' -f 2`

        puts "Finished static part"

        # run CPU benchmark
        cpuResultAsString = `sysbench --test=cpu --cpu-max-prime=20000 run`
        cpuResult = find_cpu_result_in_string cpuResultAsString
        if !cpuResult
        fail("Failed to run CPU benchmark!")
        end

        puts "Finished CPU benchmark"

        # aggregate and submit result
        aggregatedResult = "Results (#{date}):
        Batch ID: #{uuid}
        CPU: #{cpu}
        CPU Benchmark: #{cpuResult[1]}"

        BenchmarkHelper.submit_metric(<%= @metric %>, 1, aggregatedResult)

        puts aggregatedResult
puts "Uploaded results"
    end
}