#!<%= @ruby %>

require './benchmark_helper'

puts "Starting benchmark run"

# find out date
date = `date`

# find out our CPU
cpu = `cat /proc/cpuinfo | grep 'model name' | cut -d ':' -f 2`

puts "Finished static part"

# prepare mysql benchmark
success = system("sysbench --test=oltp --oltp-table-size=100000 --mysql-db=bench --mysql-user=root --mysql-password=root prepare")
if !success
    fail("Preparing mysql benchmark failed!")
end

puts "Finished preparing MySQL benchmark"

# run mysql benchmark
mysqlResultAsString = `sysbench --test=oltp --oltp-table-size=100000 --max-time=120 --oltp-test-mode=complex --oltp-read-only=off --num-threads=6 --max-requests=0 --mysql-db=bench --mysql-user=root --mysql-password=root run`
mysqlResult = find_mysql_result_in_string mysqlResultAsString
if !mysqlResult
    fail("Failed to run MySQL benchmark!")
end

puts "Finished MySQL benchmark"

# aggregate and submit result
aggregatedResult = "Results (#{date}):
CPU: #{cpu}
OLTP: #{mysqlResult[1]}"

BenchmarkHelper.submit_metric(<%= @metric %>, 1, aggregatedResult)

puts aggregatedResult
puts "Uploaded results"

# notify completed
BenchmarkHelper.notify_postprocessing_completed

puts "All done. Tearing down."

# helper methods
BEGIN {
    def fail(message)
        BenchmarkHelper.submit_metric(<%= @metric %>, 1, message)
        exit
    end

    def find_mysql_result_in_string(string)
        /transactions:.*\((.*)\)/.match string
    end
}