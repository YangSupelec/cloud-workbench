#!<%= @ruby %>

require './benchmark_helper'
require './sysbench-mysql'
require 'securerandom'

mysql = MySQL.new

success = mysql.prepare_mysql_benchmark("<%= @username %>", "<%= @pw %>", "<%= @db %>", <%= @table_size %>)
if !success
    fail("Preparing mysql benchmark failed!")
end

execute(mysql, <%= @repetitions %>, "<%= @username %>", "<%= @pw %>", "<%= @db %>", <%= @table_size %>, <%= @max_time %>)

# notify completed
BenchmarkHelper.notify_postprocessing_completed

# helper methods
BEGIN {
    def fail(message)
        BenchmarkHelper.submit_metric(<%= @metric %>, 1, message)
        exit
    end

    def execute(mysql, times, username, pw, db, table_size, max_time)
        cpu = mysql.find_cpu_info
        batch_id = SecureRandom.uuid
        times.times do |t|
            mysqlResult = mysql.run_mysql_benchmark(username, pw, db, table_size, max_time)
            if !mysqlResult
                fail("Failed to run MySQL benchmark!")
            end

            # aggregate and submit result
            aggregatedResult = "Results (#{mysql.now}):
                Batch: #{batch_id}
                CPU: #{cpu}
                OLTP: #{mysqlResult}"

            BenchmarkHelper.submit_metric(<%= @metric %>, t, aggregatedResult)
        end
    end
}