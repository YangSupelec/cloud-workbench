# -*- mode: ruby -*-
# vi: set ft=ruby :
# require 'json'

SSH_USERNAME = 'vagrant'

Vagrant.configure("2") do |config|
  # Detects vagrant-omnibus plugin
  if Vagrant.has_plugin?('vagrant-omnibus')
    puts 'INFO:  Vagrant-omnibus plugin detected.'
    config.omnibus.chef_version = :latest
  else
    puts "FATAL: Vagrant-omnibus plugin not detected. Please install the plugin with\n
                 'vagrant plugin install vagrant-omnibus' from any other directory\n
                  before continuing."
    exit
  end

  # Detects vagrant-berkshelf plugin
  # if Vagrant.has_plugin?('berkshelf')
  #   # The path to the Berksfile to use with Vagrant Berkshelf
  #   puts 'INFO:  Vagrant-berkshelf plugin detected.'
  #   config.berkshelf.berksfile_path = '../Berksfile'
  #   config.berkshelf.enabled = true
  # else
  #   puts "FATAL: Vagrant-berkshelf plugin not detected. Please install the plugin with\n
  #                'vagrant plugin install vagrant-berkshelf' from any other directory\n
  #                before continuing."
  #   exit
  # end

  # Detects vagrant-cachier plugin
  if Vagrant.has_plugin?('vagrant-cachier')
    puts 'INFO:  Vagrant-cachier plugin detected. Optimizing caches.'
    # config.cache.auto_detect = true
    config.cache.enable :chef
    config.cache.enable :apt
    config.cache.enable :gem
  else
    puts 'WARN:  Vagrant-cachier plugin not detected. Continuing unoptimized.'
  end
  
  config.vm.box = 'opscode-ubuntu-13.10'
  config.vm.box_url = 'http://opscode-vm-bento.s3.amazonaws.com/vagrant/virtualbox/opscode_ubuntu-13.10_chef-provisionerless.box'
  
  config.vm.hostname = 'work-bench-vbox-development'
  
  config.vm.network :private_network, ip: "33.33.33.10"
  config.ssh.forward_agent = true
  # config.ssh.pty = true

  config.vm.provider :virtualbox do |vb|
    # Try to approximate an AWS m1.small instance
    vb.memory = 2500
    vb.cpus = 3
  end
  
  
  # Chef solo provisioning via Berkshelf vendored cookbooks
  config.vm.provision :chef_solo do |chef|
    chef.cookbooks_path = "../berks-cookbooks"

    # Ignore warning of empty runlist on "vagrant up" since the runlist from the json is applied.
    # This allows to share the chef configuration with chef solo.
    # Appy run_list and attributes from json
    # NOTE: Update json for wrapper cookbook compatible version when cloud instances work
    # chef.json = JSON.parse( IO.read('../../../nodes/cloud-benchmarking-server.json') )
    chef.run_list = [
      'recipe[cloud-benchmarking-server]'
    ]

    chef_client_key = content_from_file("chef_client_key.pem")
    chef_validator  = content_from_file("chef_validator.pem")
    aws_ssh_key_path = ENV['AWS_WORK_BENCH_PRIVATE_KEY'].to_s
    aws_ssh_key = (File.read(aws_ssh_key_path) rescue '')
    aws_access_key = ENV['AWS_ACCESS_KEY'] || ''
    aws_secret_key = ENV['AWS_SECRET_KEY'] || ''
    chef.json = {
      "cloud-benchmarking-server" => {
        "delayed_job" => {
          "worker_processes" => "2"
        },
        "preserve_secret_config" => true,
        "chef" => {
          "server_ip" => ENV['CHEF_SERVER_IP'] || "33.33.33.50",
          "node_name"       => "cloud-benchmarking",
          "client_key_name" => "cloud-benchmarking",
          "client_key"      => chef_client_key || "EMPTY",
          "validator_key"   => chef_validator  || "EMPTY",
        },
        "aws" => {
          "ssh_key_name" => "cloud-benchmarking",
          "ssh_key"      => aws_ssh_key || "",
          "access_key"   => aws_access_key,
          "secret_key"   => aws_secret_key,
        }
      },
      # For a list of time zones see: http://en.wikipedia.org/wiki/List_of_tz_database_time_zones
      "tz" => "Europe/Zurich",
      "appbox" => {
        "deploy_keys" => [
          "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCaea+LWlsLHA+NaIHDAETymdFToH9FcTvxDGHydE8bxAvlebXq625wF9/YX8qVN6ahcFME32JbNfFSYlp8KGDCa+qNazVawdhsOrEqsudOgZRuizlTI8AjEbbNvVyanQ+c5F/+zLW0v+/N+gk203k7v9lptYlmUQEmLg5EDEwpSrVAVmyfwZr5sMtSa6Ll3WFydGwTxmtGSfzTehMcRHCN/gyk5EOcJScP0PHq6RNSwN6ZPClXuOWBL+2wJ62yNUDm5fPM/X8RgB2IBczO0h7+j51zT85HiE99o5ILfMQjZ/yff6t+qJwJS+DXVZrGs2X3CM3pSxcONKYr9AlTfn+P joel-key-pair-ireland",
          "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAAAgQCD+BQ5ILiCrn4IIoabtQOz7iAhQV48LfqdSlrxTMIoDrAzKZdyfGlhaRydLz7acdfd/PJG8IzaskinGdQYM3NfkPFniyU72ir07/QykQDbgadEA5XP4o1Tm0hUPs1Wt7OHBWzYxYjhYJN7Rnun7Pc/Xj4D7Dr48FJQUxUvAPLYJQ== joel.scheuner.dev@gmail.com"
          ],
        "admin_keys" => [
          "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCaea+LWlsLHA+NaIHDAETymdFToH9FcTvxDGHydE8bxAvlebXq625wF9/YX8qVN6ahcFME32JbNfFSYlp8KGDCa+qNazVawdhsOrEqsudOgZRuizlTI8AjEbbNvVyanQ+c5F/+zLW0v+/N+gk203k7v9lptYlmUQEmLg5EDEwpSrVAVmyfwZr5sMtSa6Ll3WFydGwTxmtGSfzTehMcRHCN/gyk5EOcJScP0PHq6RNSwN6ZPClXuOWBL+2wJ62yNUDm5fPM/X8RgB2IBczO0h7+j51zT85HiE99o5ILfMQjZ/yff6t+qJwJS+DXVZrGs2X3CM3pSxcONKYr9AlTfn+P joel-key-pair-ireland"
          ]
      },
      "cbench-rackbox" => {
        "add_group_sudoers" => [ SSH_USERNAME ]
      },
      # Optimize memory for t1.small(~500mb) instance
      "rackbox" => {
        "unicorn" => {
          "worker_processes" => "2",
          "hostname" => "33.33.33.10"
        }
      },
      "postgresql" => {
        "config" => {
          "max_connections" => "18"
        },
        "config_pgtune" => {
          "db_type" => "desktop"
        }
      },
      "databox" => {
        "db_root_password" => "cloud-ba-Ri-Uv",
        "databases" => {
          "postgresql" => [
            { "username" => "cloud",
              "password" => "uc-Au",
              "database_name" => "cloud_benchmarking_production" }
          ]
        }
      }
    }
  end
end

def content_from_file(filename)
  vagrantfile_dir = File.dirname(__FILE__)
  File.read("#{vagrantfile_dir}/#{filename}") rescue ''
end