#!<%= @ruby %>

require './benchmark_helper'
require './sysbench-io'
require 'securerandom'


io = IOBench.new

success = io.prepare_benchmark "<%= @file_size %>"
if !success
    fail("Preparing IO benchmark failed!")
end

while(true) do
    lastRun = Time.new
    do_run(io)
    currentTime = Time.new
    if( (currentTime - <%= @long_delay %>).to_i < lastRun.to_i ) then
        sleep 10000
        currentTime = Time.new
    end
end

# helper methods
BEGIN {
    def fail(message)
        BenchmarkHelper.submit_metric(<%= @metric %>, 1, message)
        exit
    end

    def do_run(io)
        uuid = SecureRandom.uuid
        <%= @short_repetitions %>.times do
        do_single(uuid, io)
            sleep <%= @short_delay %>
        end
    end

    def do_single(uuid, io)

        cpu = io.find_cpu_info
        ioResult = io.run_benchmark("<%= @file_size %>", <%= @max_time %>)
        if !ioResult
            fail("Failed to run IO benchmark!")
        end

        # aggregate and submit result
        aggregatedResult = "Results (#{io.now}):
        Batch ID: #{uuid}
        CPU: #{cpu}
        IO: #{ioResult}"

        BenchmarkHelper.submit_metric(<%= @metric %>, 1, aggregatedResult)

    end
}