# -*- mode: ruby -*-
# vi: set ft=ruby :
require 'pathname'
# Only for debugging via binding.pry. See: http://pryrepl.org/
#require 'pry'

# Determine whether secret configuration including SSH keys should be updated.
APPLY_SECRET_CONFIG = true

# Username used to ssh into VM instances. Might be 'root' for debian images.
SSH_USERNAME = 'ubuntu'

# Local paths
FILE_DIR = Pathname.new(__FILE__).parent.expand_path
REPO_ROOT = FILE_DIR.parent.parent.expand_path
CONFIG_DIR = FILE_DIR
SITE_COOKBOOKS = "#{REPO_ROOT}/chef-repo/site-cookbooks"
CWB_CHEF_SERVER_ROOT = "#{SITE_COOKBOOKS}/cbench-chef-server"
CWB_SERVER_ROOT = "#{SITE_COOKBOOKS}/cloud-benchmarking-server"

# CWB-Server Default configuration
require_relative "#{CWB_SERVER_ROOT}/vagrant/cwb_config"
require_relative "#{CWB_SERVER_ROOT}/vagrant/hash"
cwb_config = CwbConfig.new(config_dir: CONFIG_DIR,
                           apply_secrets: APPLY_SECRET_CONFIG,
                           ssh_username: SSH_USERNAME)
CHEF_JSON = cwb_config.chef_config


def ubuntu_box(config, version)
  config.vm.box = "opscode-ubuntu-#{version}" 
  config.vm.box_url = "http://opscode-vm-bento.s3.amazonaws.com/vagrant/virtualbox/opscode_ubuntu-#{version}_chef-provisionerless.box"
end

VAGRANTFILE_API_VERSION = '2'
Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  # Detects vagrant-omnibus plugin
  if Vagrant.has_plugin?('vagrant-omnibus')
    config.omnibus.chef_version = :latest
  else
    puts "FATAL: Vagrant-omnibus plugin not detected. Please install the plugin with\n
                 'vagrant plugin install vagrant-omnibus' from any other directory\n
                 before continuing."
    exit
  end
  
  # Detects vagrant-cachier plugin
  if Vagrant.has_plugin?("vagrant-cachier")
    config.cache.scope       = :box
    config.cache.auto_detect = true
  else
    puts 'WARN:  Vagrant-cachier plugin not detected. Continuing unoptimized.\n
                 You may install it with: "vagrant plugin install vagrant-cachier"'
  end

  # Box
  # Ubuntu >12.04 does not work with Chef server 11 and chef-server cookbook yet
  # Ubuntu 14.04 does not work with CWB server due to an issue with the Ruby 2.1.1 build
  ubuntu_box(config, '12.04')

  # VM
  config.ssh.forward_agent = false

  # Virtualbox
  config.vm.provider :virtualbox do |vb|
    vb.memory = 3000
    vb.cpus = 4
  end

  ### Chef-Server
  config.vm.define 'chef_server' do |chef_server|
    # VM
    chef_server.vm.hostname = 'chef-server' # MUST not contain spaces
    chef_server.ssh.forward_agent = true
    chef_server.vm.network :private_network, ip: '33.33.33.10'

    # Chef solo provisioning via berks-vendored cookbooks
    chef_server.vm.provision :chef_solo do |chef|
      chef.cookbooks_path = "#{CWB_CHEF_SERVER_ROOT}/berks-cookbooks"
      chef.add_recipe 'cbench-chef-server'
      chef.json = {
          'chef-server' => {
              # Current version as of 2014-12-01 is 11.1.6 (recommended with Ubuntu 12.04)
              # See: http://downloads.getchef.com/
              # The chef-server cookbook does currently not support 14.04: https://github.com/opscode-cookbooks/chef-server/issues/48
              'version' => '11.1.6', # or 'latest'
              # Provide if cookbook service is not working correctly (i.e. cookbooks cannot be uploaded).
              # Attempts to automatically detect public IP via Ohai (see attributes of cbench-cloud-benchmarking cookbook)
              # 'api_fqdn' => "33.33.33.10"
          }
      }
    end
  end

  ### CWB-Server
  config.vm.define 'cwb_server', primary: true do |cwb_server|
    # VM
    cwb_server.vm.hostname = 'cwb-server'
    cwb_server.ssh.forward_agent = true
    cwb_server.vm.network :private_network, ip: '33.33.33.20'

    # Chef solo provisioning via berks-vendored cookbooks
    cwb_server.vm.provision :chef_solo, id: 'chef_solo' do |chef|
      chef.cookbooks_path = "#{CWB_SERVER_ROOT}/berks-cookbooks"
      chef.provisioning_path = '/etc/chef'
      chef.add_recipe 'cloud-benchmarking-server'
      chef.json = CHEF_JSON.deep_merge(
      {
          'cloud-benchmarking-server' => {
              'delayed_job' => {
                  # Determines how many benchmarks can be prepared, started, or released in parallel.
                  # Keep in mind that workers are memory-intensive since the currently load the entire Rails environment.
                  'worker_processes' => '2'
              },
          },
          # For a list of time zones see: http://en.wikipedia.org/wiki/List_of_tz_database_time_zones
          'tz' => 'Europe/Zurich',
      })
    end
  end
end
